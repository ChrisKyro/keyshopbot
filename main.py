from aiogram import Bot, Dispatcher, executor, types, exceptions
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import aiogram.utils.markdown as fmt
import logging
import requests
import random

from botdb import botdb
import keyboards as kb
import available_goods as av


def summ_isdigit(summa):
    return summa.isdigit()


def payment_history_last(my_login, api_access_token, rows_num, next_TxnId, next_TxnDate):
    s = requests.Session()
    s.headers['authorization'] = 'Bearer ' + api_access_token
    parameters = {'rows': rows_num, 'nextTxnId': next_TxnId, 'nextTxnDate': next_TxnDate}
    h = s.get('https://edge.qiwi.com/payment-history/v2/persons/' + my_login + '/payments', params = parameters)
    return h.json()

def check_opl(summa, comment):
    global mylogin
    global api_access_token
    lastPayments = payment_history_last(mylogin, api_access_token, '5', '', '')
    datalist = lastPayments['data']
    for payment in datalist:
        if payment['status'] == 'SUCCESS' and payment['type'] == 'IN' and payment['sum']['amount'] == summa and payment['comment'] == comment:
            return True

def makeorder(number, comment, filename):
    with open(f'./goods/{filename}.txt', 'r+') as f:
        lines = f.readlines()
        f.close()
    with open(f'./orders/order{comment}.txt', 'w') as o:
        o.writelines(lines[0:number])
        o.close()
    with open(f'./goods/{filename}.txt', 'w') as f:
        f.writelines(lines[number:])
        f.close()


mylogin = ''
api_access_token = ''


botdb = botdb(f'./database/keyshopdb.db')


bot_token = ''

bot = Bot(token=bot_token)
dp = Dispatcher(bot, storage=MemoryStorage())
logging.basicConfig(level=logging.INFO)

class summbalance(StatesGroup):
    waiting_for_payment = State()
    check_payment = State()

class admbalance(StatesGroup):
    mention = State()
    value = State()

class admmailing(StatesGroup):
    wait_for_message = State()

class admbalancemin(StatesGroup):
    mention = State()
    value = State()

class admrefbalancemin(StatesGroup):
    mention = State()
    value = State()

class admcheckbalance(StatesGroup):
    id = State()

class order(StatesGroup):
    wait_for_good = State()
    wait_for_num = State()
    wait_for_manually = State()
    confirm_order = State()

'''–ì–õ–ê–í–ù–û–ï –ú–ï–ù–Æ, –ü–û–ü–û–õ–ù–ï–ù–ò–ï –ë–ê–õ–ê–ù–°–ê'''

@dp.message_handler(commands='start')
async def welcome(message: types.message):
    if message.get_args() == '':
        ref_code = 0
    else:
        ref_code = int(message.get_args())
    await message.answer(
        fmt.text(
            fmt.text('–ü—Ä–∏–≤–µ—Ç, –¥—Ä—É–≥!‚úã'),
            fmt.text('–°–µ–π—á–∞—Å —Ç—ã –ø–æ–ª—å–∑—É–µ—à—å—Å—è –¥–µ–º–æ-–≤–µ—Ä—Å–∏–µ–π –Ω–∞—à–µ–≥–æ –Ω–æ–≤–æ–≥–æ —à–æ–ø–∞'),
            fmt.text('–ï—Å–ª–∏ —Ç—ã –Ω–∞—à—ë–ª –±–∞–≥, –∏–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –¥–æ—Ä–∞–±–æ—Ç–∫–µ —à–æ–ø–∞, –ø–∏—à–∏ —Å—é–¥–∞ - @GodDotCom'),
            fmt.text(),
            fmt.text('–ü–æ –Ω–∞—à–µ–π —Ä–µ—Ñ–∫–µ —Ç—ã –º–æ–∂–µ—à—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å 10% —Å –∫–∞–∂–¥–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è, —Ç–∞–∫ —á—Ç–æ –¥–µ—Ä–∑–∞–π –ø–æ–º–æ–≥–∞—Ç—å —Ä–∞–∑–≤–∏—Ç–∏—é —à–æ–ø–∞ üëá'),
        sep='\n'),
    parse_mode='HTML', reply_markup=kb.ref_keyboard())
    if (not botdb.user_exists(message.from_user.id)):
        botdb.new_user(message.from_user.id, message.from_user.mention, ref_code)

@dp.message_handler(lambda message: message.text == 'üìá –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å üìá')
async def prifile(message: types.message):
    await message.answer(
        fmt.text(
            fmt.text(f'–ü—Ä–æ–≤–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.mention}'),
            fmt.text(),
            fmt.text(f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!'),
            fmt.text(f'–¢—ã —Å –Ω–∞–º–∏ —Å {botdb.get_regdate(message.from_user.id)}'),
            fmt.text(f'–¢–≤–æ–π ID: <code>{message.from_user.id}</code>'),
            fmt.text(),
            fmt.text(f'–ë–∞–ª–∞–Ω—Å {botdb.check_balance(message.from_user.id)} —Ä—É–±–ª–µ–π'),
            fmt.text(),
            fmt.text(f'–ï—Å–ª–∏ —Ç—ã –µ—â—ë –Ω–µ –∑–Ω–∞–∫–æ–º —Å –Ω–∞—à–µ–π <b>—Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π</b>, —Ç–æ —Å–∫–æ—Ä–µ–π —Å–¥–µ–ª–∞–π —ç—Ç–æ. –î–µ–Ω–≥–∏ –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –Ω–∞ Qiwi üíµ'),
            sep='\n'),
        parse_mode = 'HTML', reply_markup = kb.ref_keyboard())

@dp.message_handler(lambda message: message.text == 'üíº –ì–∞—Ä–∞–Ω—Ç üíº')
async def gatant(message: types.message):
    await message.answer(
        fmt.text(
            fmt.text('–ì–∞—Ä–∞–Ω—Ç —Å –∫–æ–º–∏—Å—Å–∏–µ–π –≤—Å–µ–≥–æ 2%'),
            fmt.text(),
            fmt.text('–ü–æ –ø–æ–≤–æ–¥—É —É—Å–ª—É–≥ –≥–∞—Ä–∞–Ω—Ç–∞ –ø–∏—Å–∞—Ç—å NONE'),
            sep='\n'),
        parse_mode = 'HTML')

@dp.message_handler(lambda message: message.text == 'üíµ –ü–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á–µ—Ç üíµ')
async def addbalance(message: types.message):
    await message.answer('–í –¥–µ–º–æ-–≤–µ—Ä—Å–∏–∏ –º–∞–≥–∞–∑–∏–Ω–∞ –Ω–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Å—á—ë—Ç–∞. –ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ —É–∂–µ –µ—Å—Ç—å 1000—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é')

@dp.message_handler(state=summbalance.waiting_for_payment)
async def process_pay(message: types.message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É':
        await message.answer('–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=kb.main_keyboard())
        await state.finish()
    else:
        comment = random.randint(0, 1000000)
        if summ_isdigit(message.text) == True:
            async with state.proxy() as data:
                data['summa'] = message.text
                data['comment'] = comment
            await message.answer(
                fmt.text(
                    fmt.text('–ü–æ–ø–æ–ª–Ω–∏—Ç–µ –∫–æ—à–µ–ª—ë–∫ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é —Å—É–º–º—É'),
                    fmt.text('–°—É–º–º–∞ –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–Ω—ã <b>–ø–æ–ª–Ω–æ—Å—Ç—å—é</b> —Å–æ–≤–ø–∞–¥–∞—Ç—å'),
                    fmt.text('–ù–æ–º–µ—Ä, —Å—É–º–º—É –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –º–æ–∂–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å'),
                    fmt.text(),
                    fmt.text('–ü–µ—Ä–µ–≤–æ–¥ –ø–æ –Ω–æ–º–µ—Ä—É –Ω–∞ –∫–∏–≤–∏ –∫–æ—à–µ–ª—ë–∫'),
                    fmt.text('–ù–æ–º–µ—Ä: <code>79878020873</code>'),
                    fmt.text(f'–°—É–º–º–∞: <code>{message.text}</code>'),
                    fmt.text(f'–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <code>{comment}</code>'),
                    sep='\n'),
                parse_mode='HTML', reply_markup=kb.check_pay_keyboard())
            await summbalance.next()
        else:
            await message.answer('–°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º. –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ.')

@dp.message_handler(state = summbalance.check_payment)
async def check_pay(message: types.message, state: FSMContext):
    if message.text == '–û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–ª–∞—Ç—É':
        await message.answer('–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞', reply_markup=kb.main_keyboard())
        await state.finish()
    elif message.text == '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É':
        async with state.proxy() as data:
            summa = int(data['summa'])
            comment = str(data['comment'])
        if check_opl(summa, comment) == True:
            await message.answer('–£—Ä–∞, –æ–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ üíµ', reply_markup = kb.main_keyboard())
            botdb.change_balance(message.from_user.id, summa)
            botdb.new_payment(message.from_user.id, summa)
            await state.finish()
            ref_id = botdb.get_ref(message.from_user.id)
            if ref_id != 0:
                ref_summa = int(summa/100)*10
                botdb.change_balance(ref_id, ref_summa)
                botdb.change_ref_balance(ref_id, ref_summa)
        else:
            await message.answer('–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ üòï')
    else:
        await  message.answer('–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏')

'''–†–ï–§–ï–†–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê'''

@dp.callback_query_handler(text = 'ref')
async def ref(callback: types.CallbackQuery):
    await callback.message.answer(
        fmt.text(
            fmt.text('–ü–æ –Ω–∞—à–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —Ç—ã –º–æ–∂–µ—à—å –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å 10% —Å –∫–∞–∂–¥–æ–≥–æ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª–∞ üíµ'),
            fmt.text('–í—ã–≤–æ–¥ –æ—Ç <b>200 —Ä—É–±–ª–µ–π</b> –Ω–∞ –∫–∏–≤–∏'),
            fmt.text('–ü–æ –ø–æ–≤–æ–¥—É –≤—ã–≤–æ–¥–∞ –ø–∏—Å–∞—Ç—å @GodDotCom'),
            fmt.text(),
            fmt.text(f'–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: t.me/DotComShopBot?start={callback.from_user.id}'),
            fmt.text(f'–£ —Ç–µ–±—è {botdb.ref_num(callback.from_user.id)} —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤'),
            fmt.text(f'–û–Ω–∏ –ø—Ä–∏–Ω–µ—Å–ª–∏ –≤–∞–º {botdb.check_ref_balance(callback.from_user.id)} —Ä—É–±–ª–µ–π'),
            sep='\n'),
        parse_mode='HTML', reply_markup=kb.main_keyboard())
    await callback.answer()

"""–ü–û–î–î–ï–†–ñ–ö–ê"""

@dp.message_handler(lambda message: message.text == 'üßëüèø‚Äçüîß –ü–æ–¥–¥–µ—Ä–∂–∫–∞ üßëüèø‚Äçüîß')
async def support(message: types.message):
    await message.answer(
        fmt.text(
            fmt.text('–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –º—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –≤–∞–º ‚ò∫Ô∏è'),
            fmt.text(),
            fmt.text('–¢–µ—Ö. –ø–æ–¥–¥–µ—Ä–∂–∫–∞, –ø–æ –ª—é–±—ã–º –≤–æ–ø—Ä–æ—Å–∞–º: @GodDotCom'),
            sep='\n'),
        parse_mode='HTML')

'''–ü–†–ê–í–ò–õ–ê'''

@dp.message_handler(lambda message: message.text == 'üìù –ü—Ä–∞–≤–∏–ª–∞ üìù')
async def rules(message: types.message):
    await message.answer('''–î–∞–Ω–Ω—ã–π —Ä–∞–∑–¥–µ–ª –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω''')

'''–ê–î–ú–ò–ù –ü–ê–ù–ï–õ–¨'''

@dp.message_handler(commands='adm')
async def adm(message: types.message):
    if botdb.check_admin(message.from_user.id) == True:
        await message.answer('–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å', reply_markup=kb.adm_keyboard())
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞', reply_markup=kb.main_keyboard())

@dp.message_handler(lambda message: message.text == '–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞')
async def addbalancef(message: types.message):
    if botdb.check_admin(message.from_user.id) == True:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        await admbalance.mention.set()
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞', reply_markup=kb.main_keyboard())

@dp.message_handler(state = admbalance.mention)
async def admbalsumm(message: types.message, state: FSMContext):
    if botdb.check_admin(message.from_user.id) == True:
        async with state.proxy() as data:
            data['id'] = message.text
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É')
        await admbalance.next()
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞', reply_markup=kb.main_keyboard())

@dp.message_handler(state = admbalance.value)
async def admbalsuccess(message: types.message, state: FSMContext):
    if botdb.check_admin(message.from_user.id) == True:
        async with state.proxy() as data:
            id = str(data['id'])
        value = int(message.text)
        await message.answer('–î–µ–Ω—å–≥–∏ –∑–∞—á–∏—Å–ª–µ–Ω—ã –Ω–∞ –±–∞–ª–∞–Ω—Å', reply_markup=kb.main_keyboard())
        botdb.adm_change_balance(id, value)
        await state.finish()
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞', reply_markup=kb.main_keyboard())

@dp.message_handler(lambda message: message.text == '–°–Ω—è—Ç—å —Å –±–∞–ª–∞–Ω—Å–∞')
async def addbalancefmin(message: types.message):
    if botdb.check_admin(message.from_user.id) == True:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        await admbalancemin.mention.set()
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞', reply_markup=kb.main_keyboard())

@dp.message_handler(state = admbalancemin.mention)
async def admbalsummmin(message: types.message, state: FSMContext):
    if botdb.check_admin(message.from_user.id) == True:
        async with state.proxy() as data:
            data['id'] = message.text
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É')
        await admbalancemin.next()
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞', reply_markup=kb.main_keyboard())

@dp.message_handler(state = admbalancemin.value)
async def admbalsuccessmin(message: types.message, state: FSMContext):
    if botdb.check_admin(message.from_user.id) == True:
        async with state.proxy() as data:
            id = str(data['id'])
        value = int(message.text)
        await message.answer('–î–µ–Ω—å–≥–∏ —Å–Ω—è—Ç—ã —Å –±–∞–ª–∞–Ω—Å–∞', reply_markup=kb.main_keyboard())
        botdb.change_balance_min(id, value)
        await state.finish()
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞', reply_markup=kb.main_keyboard())

@dp.message_handler(lambda message: message.text == '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã')
async def checkbalid(message: types.message):
    if botdb.check_admin(message.from_user.id) == True:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        await admcheckbalance.id.set()
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞', reply_markup=kb.main_keyboard())

@dp.message_handler(state = admcheckbalance.id)
async def admcheckbal(message: types.message, state: FSMContext):
    if botdb.check_admin(message.from_user.id) == True:
        await message.answer(f'–ù–∞ –±–∞–ª–∞–Ω—Å–µ —à–æ–ø–∞: {botdb.check_balance(int(message.text))}. –ù–∞ —Ä–µ—Ñ –±–∞–ª–∞–Ω—Å–µ: {botdb.check_ref_balance(int(message.text))}', reply_markup=kb.main_keyboard())
        await state.finish()
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞', reply_markup=kb.main_keyboard())

@dp.message_handler(lambda message: message.text == '–°–Ω—è—Ç—å —Å —Ä–µ—Ñ.–±–∞–ª–∞–Ω—Å–∞')
async def addbalanceref(message: types.message):
    if botdb.check_admin(message.from_user.id) == True:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
        await admrefbalancemin.mention.set()
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞', reply_markup=kb.main_keyboard())

@dp.message_handler(state = admrefbalancemin.mention)
async def admbalsummref(message: types.message, state: FSMContext):
    if botdb.check_admin(message.from_user.id) == True:
        async with state.proxy() as data:
            data['id'] = message.text
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É')
        await admrefbalancemin.next()
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞', reply_markup=kb.main_keyboard())

@dp.message_handler(state = admrefbalancemin.value)
async def admbalsuccessref(message: types.message, state: FSMContext):
    if botdb.check_admin(message.from_user.id) == True:
        async with state.proxy() as data:
            id = str(data['id'])
        value = int(message.text)
        await message.answer('–î–µ–Ω—å–≥–∏ —Å–Ω—è—Ç—ã —Å —Ä–µ—Ñ. –±–∞–ª–∞–Ω—Å–∞', reply_markup=kb.main_keyboard())
        botdb.adm_minus_ref(id, value)
        await state.finish()
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞', reply_markup=kb.main_keyboard())

@dp.message_handler(lambda message: message.text == '–†–∞—Å—Å—ã–ª–∫–∞')
async def admmessage(message: types.message):
    if botdb.check_admin(message.from_user.id) == True:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', reply_markup = kb.adm_cancel_keyboard())
        await admmailing.wait_for_message.set()
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞', reply_markup=kb.main_keyboard())

@dp.message_handler(state=admmailing.wait_for_message)
async def admsending(message: types.message, state: FSMContext):
    if botdb.check_admin(message.from_user.id) == True:
        if message.text == '–û—Ç–º–µ–Ω–∞':
            await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup = kb.main_keyboard())
            await state.finish()
        else:
            for person in botdb.get_all_userid():
                try:
                    await bot.send_message(chat_id=int(person[0]), text=message.text)
                except exceptions.ChatNotFound and exceptions.BotBlocked:
                    print('–¢–∞–∫–æ–≥–æ —á–∞—Ç–∞ –Ω–µ—Ç, –≤–æ–∑–º–æ–∂–Ω–æ –µ–≥–æ —É–¥–∞–ª–∏–ª–∏')
            await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ', reply_markup=kb.main_keyboard())
            await state.finish()
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞', reply_markup=kb.main_keyboard())
        await state.finish()

"""–¢–û–í–ê–†–´"""

@dp.message_handler(lambda message: message.text == 'üíé –¢–æ–≤–∞—Ä—ã üíé')
async def cats(message: types.message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup = kb.cats_keyboard())

@dp.message_handler(state=order.wait_for_good)
async def error(message: types.message):
    await message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é. –î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"')

@dp.message_handler(state=order.wait_for_num)
async def error(message: types.message):
    await message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —è –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é. –î–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"')

@dp.callback_query_handler(text = 'keys')
async def cat_str(callback: types.CallbackQuery):
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä', reply_markup=kb.keys_keyboard())
    await order.wait_for_good.set()
    await callback.answer()

@dp.callback_query_handler(state = order.wait_for_good, text = 'cancelorder')
async def back(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=kb.cats_keyboard())
    await callback.answer()
    await state.finish()

@dp.callback_query_handler(state = order.wait_for_good, text = 'CSGO_keys')
async def bk_str(callback: types.CallbackQuery, state: FSMContext):
    if av.available_CSGO() <= 0:
        await callback.message.edit_text('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–æ–≤–∞—Ä –∏–ª–∏ –¥–æ–∂–¥–∞—Ç—å—Å—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è', reply_markup = kb.cats_keyboard())
        await callback.answer()
        await state.finish()
    else:
        await order.next()
        await callback.message.edit_text(
            fmt.text(
                fmt.text('üìá –ö–ª—é—á–∏ CSGO üìá'),
                fmt.text('üëå –í—ã –ø–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á —Å Prime üëå'),
                fmt.text(),
                fmt.text('–¶–µ–Ω–∞: 200 —Ä—É–±–ª–µ–π –∑–∞ —à—Ç'),
                fmt.text(),
                fmt.text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:'),
                sep='\n'),
            parse_mode='HTML', reply_markup=kb.num_keyboard())
        await callback.answer()
        async with state.proxy() as data:
            data['good'] = '–ö–ª—é—á–∏ CSGO'
            data['available'] = av.available_CSGO()

@dp.callback_query_handler(state = order.wait_for_good, text = 'Fenses_keys')
async def psk_str(callback: types.CallbackQuery, state: FSMContext):
    if av.available_Fences() <= 0:
        await callback.message.edit_text('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –¥–∞–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–π —Ç–æ–≤–∞—Ä –∏–ª–∏ –¥–æ–∂–¥–∞—Ç—å—Å—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è', reply_markup = kb.cats_keyboard())
        await callback.answer()
        await state.finish()
    else:
        await order.next()
        await callback.message.edit_text('–í—ã –ø–æ–ª—É—á–∏—Ç–µ –∫–ª—é—á Fences 3\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', reply_markup=kb.num_keyboard())
        await callback.answer()
        async with state.proxy() as data:
            data['good'] = '–ö–ª—é—á–∏ Fences'
            data['available'] = av.available_Fences()

@dp.callback_query_handler(state = order.wait_for_good)
async def inputerror(callback: types.CallbackQuery, state: FSMContext):
    if callback.data not in ('CSGO_keys', 'Fenses_keys'):
        await state.finish()
        await callback.message.edit_text(
            '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö. –ù–∞–º –ø—Ä–∏—à–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –∑–∞–∫–∞–∑–∞. –ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–¥–æ–±–Ω—ã—Ö –æ—à–∏–±–æ–∫, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–≤–∞ –¥–∏–∞–ª–æ–≥–æ–≤—ã—Ö –æ–∫–Ω–∞ –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ',
            reply_markup=kb.cats_keyboard())
        await callback.answer()

@dp.callback_query_handler(state = order.wait_for_num)
async def wait_for_num(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == 'cancelorder':
        await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=kb.cats_keyboard())
        await callback.answer()
        await state.finish()
    elif callback.data == 'manually_input':
        await callback.message.edit_text('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ')
        await callback.answer()
        await order.next()
    elif summ_isdigit(callback.data) == True:
        async with state.proxy() as data:
            data['num'] = str(callback.data)
            good = data['good']
            available = data['available']
        if int(available) >= int(callback.data):
            summ = int(callback.data)*botdb.get_price(good)
            async with state.proxy() as data:
                data['summ'] = summ
            await callback.message.edit_text(fmt.text(
                    fmt.text('<b>–ó–∞–∫–∞–∑</b>'),
                    fmt.text(),
                    fmt.text(f'–¢–æ–≤–∞—Ä: {good}'),
                    fmt.text(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {str(callback.data)}'),
                    fmt.text(f'–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {summ} —Ä—É–±–ª–µ–π'),
                    fmt.text(),
                    fmt.text('–ï—Å–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã, —Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫—É'),
                    sep='\n'),
                parse_mode='HTML', reply_markup=kb.confirmorder_keyboard())
            await callback.answer()
            await order.confirm_order.set()
        else:
            await callback.message.edit_text(f'–í—ã –≤–≤–µ–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–ª—å—à–µ, —á–µ–º –µ—Å—Ç—å —É –Ω–∞—Å –≤ –Ω–∞–ª–∏—á–∏–∏. –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –±–æ–ª–µ–µ {str(available)}', reply_markup=kb.num_keyboard())
            await callback.answer()
    else:
        await state.finish()
        await callback.message.edit_text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö. –ù–∞–º –ø—Ä–∏—à–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –∑–∞–∫–∞–∑–∞. –ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–¥–æ–±–Ω—ã—Ö –æ—à–∏–±–æ–∫, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–≤–∞ –¥–∏–∞–ª–æ–≥–æ–≤—ã—Ö –æ–∫–Ω–∞ –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ', reply_markup=kb.cats_keyboard())
        await callback.answer()

@dp.message_handler(state=order.wait_for_manually)
async def wait_for_manually(message: types.message, state: FSMContext):
    if summ_isdigit(message.text) == True:
        async with state.proxy() as data:
            data['num'] = message.text
            good = data['good']
            available = data['available']
        if int(available) >= int(message.text):
            summ = int(message.text)*botdb.get_price(good)
            async with state.proxy() as data:
                data['summ'] = summ
            await message.answer(
                fmt.text(
                    fmt.text('<b>–ó–∞–∫–∞–∑</b>'),
                    fmt.text(),
                    fmt.text(f'–¢–æ–≤–∞—Ä: {good}'),
                    fmt.text(f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {message.text}'),
                    fmt.text(f'–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {summ} —Ä—É–±–ª–µ–π'),
                    fmt.text(),
                    fmt.text('–ï—Å–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤–µ—Ä–Ω—ã, —Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫—É'),
                    sep='\n'),
                parse_mode='HTML', reply_markup=kb.confirmorder_keyboard())
            await order.confirm_order.set()
        else:
            await message.answer(f'–í—ã –≤–≤–µ–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–ª—å—à–µ, —á–µ–º –µ—Å—Ç—å —É –Ω–∞—Å –≤ –Ω–∞–ª–∏—á–∏–∏. –í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –±–æ–ª–µ–µ {str(available)}', reply_markup=kb.num_keyboard())
            await order.wait_for_num.set()
    else:
        await message.answer('–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ')

@dp.callback_query_handler(state = order.confirm_order)
async def confirm_order(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == 'cancelorder':
        await callback.message.edit_text('–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=kb.cats_keyboard())
        await callback.answer()
        await state.finish()
    elif callback.data == 'confirm':
        async with state.proxy() as data:
            num = int(data['num'])
            good = str(data['good'])
            summ = data['summ']
        if summ > botdb.check_balance(callback.from_user.id):
            await callback.message.edit_text(f'–í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç {summ - botdb.check_balance(callback.from_user.id)} —Ä—É–±–ª–µ–π –¥–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É', reply_markup=kb.cats_keyboard())
            await state.finish()
        else:
            await callback.message.edit_text('–ü–æ–¥–æ–∂–¥–∏—Ç–µ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥, –º—ã —Å–æ–±–∏—Ä–∞–µ–º –≤–∞—à –∑–∞–∫–∞–∑ ‚è∞')
            await callback.answer()
            botdb.change_balance_min(callback.from_user.id, summ)
            makeorder(num, str(callback.from_user.id), good)
            await callback.message.answer_document(types.InputFile(f'./orders/order{str(callback.from_user.id)}.txt'))
            await callback.message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –Ω–∞—à–µ–≥–æ –º–∞–≥–∞–∑–∏–Ω–∞ ‚ù§')
            await state.finish()
    else:
        await state.finish()
        await callback.message.edit_text(
            '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö. –ù–∞–º –ø—Ä–∏—à–ª–æ—Å—å –æ—Ç–º–µ–Ω–∏—Ç—å —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã –∑–∞–∫–∞–∑–∞. –ß—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø–æ–¥–æ–±–Ω—ã—Ö –æ—à–∏–±–æ–∫, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–≤–∞ –¥–∏–∞–ª–æ–≥–æ–≤—ã—Ö –æ–∫–Ω–∞ –¥–ª—è —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ',
            reply_markup=kb.cats_keyboard())
        await callback.answer()

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)